// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface CanvasSnapshot {
  nodes: unknown[];
  edges: unknown[];
}

interface PakOperationResult {
  manifest: unknown;
  canvas: CanvasSnapshot;
  filePath: string;
}

interface PakContext {
  save: (payload: {
    fileName: string;
    directory?: string;
    canvas: CanvasSnapshot;
    assets?: { path: string; data: unknown }[];
  }) => Promise<PakOperationResult>;
  load: (filePath: string) => Promise<PakOperationResult>;
}

type DialogFileFilter = {
  name: string;
  extensions: string[];
};

type DialogOpenFileOptions = {
  filters?: DialogFileFilter[];
};

interface FileSystemContext {
  readFileAsDataUrl: (filePath: string) => Promise<string>;
  openFile: (options?: DialogOpenFileOptions) => Promise<string | null>;
  openDirectory: () => Promise<string | null>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  settingsStore: {
      get: (key: "deepseek" | "chatgpt") => { apiKey: string } | undefined;
      set: (key: "deepseek" | "chatgpt", value: { apiKey: string }) => void;
  };
  projectPak: PakContext;
  fileSystem: FileSystemContext;
}
