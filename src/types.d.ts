// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
import type { AiGateway, AiProvider } from "./core/llm/aiModels";
import type {
  LlmChunkPayload,
  LlmCompletePayload,
  LlmErrorPayload,
  LlmStreamRequestPayload,
} from "./helpers/ipc/llm/llm-types";
import type {
  CleanupDraftsRequest,
  DraftDetail,
  DraftRecord,
  MarkDraftPromotedRequest,
  SaveDraftRequest,
} from "./core/drafts/types";

// Preload types
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface CanvasSnapshot {
  nodes: unknown[];
  edges: unknown[];
}

interface PakOperationResult {
  manifest: unknown;
  canvas: CanvasSnapshot;
  filePath: string;
}

interface PakAssetSummary {
  path: string;
  size: number;
}

interface PakAssetData {
  path: string;
  data: ArrayBuffer;
  mimeType: string;
}

interface PakContext {
  save: (payload: {
    fileName: string;
    directory?: string;
    canvas: CanvasSnapshot;
    assets?: { path: string; data: unknown }[];
  }) => Promise<PakOperationResult>;
  load: (filePath: string) => Promise<PakOperationResult>;
  addAsset: (asset: {
    path: string;
    data: unknown;
  }) => Promise<PakAssetSummary>;
  removeAsset: (assetPath: string) => Promise<boolean>;
  listAssets: () => Promise<PakAssetSummary[]>;
  getAssetData: (assetPath: string) => Promise<PakAssetData | null>;
}

type DialogFileFilter = {
  name: string;
  extensions: string[];
};

type DialogOpenFileOptions = {
  filters?: DialogFileFilter[];
};

interface FileSystemContext {
  readFileAsDataUrl: (filePath: string) => Promise<string>;
  openFile: (options?: DialogOpenFileOptions) => Promise<string | null>;
  openDirectory: () => Promise<string | null>;
  saveClipboardImage: (
    base64Data: string,
    extension: string,
  ) => Promise<string>;
}

interface LlmContext {
  stream: (payload: LlmStreamRequestPayload) => void;
  onChunk: (callback: (payload: LlmChunkPayload) => void) => () => void;
  onError: (callback: (payload: LlmErrorPayload) => void) => () => void;
  onComplete: (callback: (payload: LlmCompletePayload) => void) => () => void;
}
interface DraftContext {
  save: (payload: SaveDraftRequest) => Promise<DraftDetail>;
  load: (draftId: string) => Promise<DraftDetail | null>;
  list: () => Promise<DraftRecord[]>;
  delete: (draftId: string) => Promise<void>;
  markPromoted: (payload: MarkDraftPromotedRequest) => Promise<void>;
  cleanup: (payload?: CleanupDraftsRequest) => Promise<void>;
}

declare global {
    const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
    const MAIN_WINDOW_VITE_NAME: string;
    interface Window {
        electronWindow: ElectronWindow;
        settingsStore: {
            getProvider: (key: AiProvider) => { apiKey: string } | undefined;
            setProvider: (key: AiProvider, value: { apiKey: string }) => void;
            getGateway: (key: AiGateway) =>
            | {
                apiKey: string;
                useForAllModels: boolean;
                headers?: { referer?: string; title?: string };
                }
            | undefined;
            setGateway: (
            key: AiGateway,
            value: {
                apiKey: string;
                useForAllModels: boolean;
                headers?: { referer?: string; title?: string };
            },
            ) => void;
            getPreprompt: () => string;
            setPreprompt: (value: string) => void;
        };
        projectPak: PakContext;
        fileSystem: FileSystemContext;
        llm: LlmContext;
        drafts: DraftContext;
    }
}
export {}
